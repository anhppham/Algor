You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

#solution - actually using the list to store the value, not the right answer
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    struct ListNode p;
    struct ListNode q;
    q.next = l1;
    p.next = l2;
    List1 = [];
    List2 = [];
    total = [];
    while (p!= NULL){
        p = p->next;
        List1.append(p.val)
    }
    while (q!= NULL){
        q = q->next;
        List1.append(p.val)
    }
    int n = sizeof(List1)/sizeof(List1[0]);
    int temp;
    if (List1!=NULL) && (List2!=NULL){
        for(int i = 0; i<n/2; i++){
            if (i==0 && List1[n-1] == 0){
                continue;
            }
            else{
                temp = List1[i];
                List1[i] = List1[n-i-1];
                List1[n-i-1] = temp;
            }
        }
        for(int j = 0; j<n/2; j++){
            if (j==0 && List2[n-1] == 0){
                continue;
            }
            else{
                temp = List2[j];
                List2[j] = List2[n-j-1];
                List2[n-2-1] = temp;
            }
        }
        for(int k = 0; k<n; k++){
            int m = List1[k] + List2[k]
            total.append(k)
        }
    }
    return total
}
